#!/usr/bin/env node

const parseArgs = require('minimist')
const chalk = require('chalk')

const args = process.argv.slice(2)
const argv = parseArgs(args, {
  alias: {
    k: 'key',
    t: 'token',
    r: 'replace',
    h: 'help'
  },
  boolean: ['r', 'h'],
  string: ['k', 't']
})

if (argv.help) {
  console.log(`
  Description
  Add a new icon set config. Options that are not supplied as arguments will be prompted.

  Usage
    $ glyphs add [--key <file-key> --token <access-token>]

  Options
    --key, -k      File key for the Figma file
    --token, -t    Personal access token from Figma
    --replace, -r  Overwrite any existing configuration for <name> or <key>
    --help, -h     Displays this message
  `)
  process.exit()
}

const Configstore = require('configstore')
const { Client: figmaClient } = require('figma-js')
const inquirer = require('inquirer')

const pkg = require('../package.json')

const conf = new Configstore(pkg.name)
let { key, token, replace } = argv

;(async () => {
  const configs = conf.all
  const hasConfig = Object.keys(configs).length

  if (!key || !token) {
    if (hasConfig) {
      const firstSet = Object.values(configs)[0] || {}
      token = firstSet.token
    }

    const validate = (input) => !!(input && input.length) || 'Input value is required'

    const questions = [{
      type: 'input',
      name: 'key',
      message: 'Figma File Key:',
      default: key,
      validate
    }, {
      type: 'input',
      name: 'token',
      message: 'Figma Personal Access Token:',
      default: token,
      validate
    }]

    console.log()
    console.log('  Add a new icon set config by providing a file key and access token from Figma')
    console.log('  Instructions can be found at https://glyphs.fyi/docs/cli')
    console.log()
    const answers = await inquirer.prompt(questions)
    key = answers.key
    token = answers.token
  }

  if (!token || !key) {
    console.log()
    console.log('  Operation failed')
    console.log('  File key and access token are required to continue')
  } else {
    if (hasConfig) {
      const [setEntries] = Object.entries(configs).filter(([name, { key: k }]) => k === key)
      const name = setEntries && setEntries[0]
      if (name && !replace) {
        console.log()
        console.log(`  Configuration with that file key already exists: "${name}"`)
        console.log()
        process.exit(1)
      }
    }

    const { client: figma } = figmaClient({ personalAccessToken })
    const file = await figma.get(`files/${key}`).then(({ data }) => data).catch(err => {
      const error = err.toJSON()
      console.log()
      console.log(' ', error.message)
      console.log()
      process.exit(1)
    })
    const sets = file.document.children
      .filter(({ name }) => name.startsWith('->'))
      .map(({ name }) => name.split(' ')[1].toLowerCase())

    conf.set(key, {
      token,
      key,
      name: file.name,
      sets: sets
    })
    console.log()
    console.log(`  Successfully configured the "${file.name}" file`)
    console.log()
    console.log(`  You can run:`)
    console.log(`    glyphs sync   - to export a set to your current folder`)
    console.log(`    glyphs get    - to get the configuration settings for your file`)
    console.log(`    glyphs remove - to remove the file from your config`)
  }
  console.log()
})()
