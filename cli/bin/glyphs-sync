#!/usr/bin/env node

const parseArgs = require('minimist')

const args = process.argv.slice(2)
const argv = parseArgs(args, {
  alias: {
    S: 'set',
    d: 'data',
    s: 'svg',
    p: 'preview',
    h: 'help'
  },
  boolean: ['h', 'p'],
  string: ['S', 'd', 's']
})

if (argv.help) {
  console.log(`
  Description
  Sync a configured icon set to the current directory. Options that are not supplied as arguments will be prompted.

  Usage
    $ glyphs sync [<key|name> --set <set> --data <data-folder> --svg <svg-folder>]

  Options
    --set, -S      Name of icon set to sync
    --data, -d     Output folder for icon-set data
    --svg, -s      Output folder for SVGs
    --preview, -p  Generate a preview file
    --diff         Fetch only new and updated assets
    --categories   Specify categories to include
    --help, -h     Displays this message
  `)
  process.exit()
}

const path = require('path')
const Configstore = require('configstore')
const { camelCase } = require('lodash')
const inquirer = require('inquirer')
const pkg = require('../package.json')

;(async () => {
  console.log()
  const conf = new Configstore(pkg.name)
  const configs = conf.all
  const hasConfig = Object.keys(configs).length
  let { _: [query], set, preview: generatePreview } = argv
  let key

  if (!hasConfig) {
    console.log()
    console.log(`  You haven't configured any files to sync`)
    console.log(`  Run "glyphs sync" or "glyphs help" to get started`)
    console.log()
    process.exit(1)
  }

  if (query) {
    const fileConf = query in configs
      ? configs[query]
      : Object.values(configs).find(({ name }) =>
        name.toLowerCase().includes(query.toLowerCase()))

    if (fileConf) {
      key = fileConf.key
    } else {
      console.log(`  No file containing "${query}" has been found in your config`)
      console.log()
      query = null
    }
  }

  if (!query) {
    if (Object.keys(configs).length > 1) {
      const choices = Object.entries(configs)
        .map(([key, { name }]) => ({ value: key, name }))
      const questions = [{
        type: 'list',
        name: 'name',
        message: 'Select the file to sync',
        choices,
      }]

      const answers = await inquirer.prompt(questions)
      key = answers.name
    } else {
      key = Object.keys(configs)[0]
    }
  }

  const fileConf = configs[key]
  const choices = Object.keys(fileConf.sets)

  if (!set) {
    const questions = [{
      type: 'list',
      name: 'name',
      message: `Select the icon set to sync from ${fileConf.name}`,
      choices,
    }]

    const answers = await inquirer.prompt(questions)
    set = answers.name
    console.log()
  } else {
    set = choices.find(s => s.toLowerCase().includes(set.toLowerCase()))
  }

  const syncArgs = {
    data: 'data',
    svg: 'svg',
    ...argv,
    key,
    set
  }

  const sync = require('../lib/sync')

  const run = async () => {
    await sync(syncArgs).catch(handleError)
    if (generatePreview) {
      const dataDir = path.join(process.cwd(), syncArgs.data)
      require('../lib/preview')(dataDir)
    }
    console.log()
    process.exit()
  }

  run()
})()

function handleError (err) {
  console.log()
  console.log(err.message)
  process.env.NODE_ENV === 'dev' && console.log(err)
  console.log()
  process.exit(1)
}
