#!/usr/bin/env node

const parseArgs = require('minimist')
const chalk = require('chalk')

const args = process.argv.slice(2)
const argv = parseArgs(args, {
  alias: {
    i: 'ignore',
    c: 'config',
    d: 'data',
    s: 'svg',
    h: 'help'
  },
  boolean: ['i', 'h'],
  string: ['c', 'd', 's']
})

if (argv.help) {
  console.log(`
  Description
  Sync a configured icon set to the current directory.

  Usage
    $ glyphs sync [<key> --config <file-path> --data <data-folder> --svg <svg-folder>]

  Options
    --ignore, -i   Ignore unchanged icons (improves perf)
    --config, -c   Path to config file
    --data, -d     Output folder for icon-set data
    --svg, -s      Output folder for SVGs
    --help, -h     Displays this message
  `)
  process.exit(0)
}

const Progress = require('cli-progress')
const Configstore = require('configstore')
const Figma = require('figma-api')
const camelCase = require('lodash.camelcase')
const inquirer = require('inquirer')
const pkg = require('../package.json')

;(async () => {
  const progress = new Progress.SingleBar({
    format: '|' + chalk.cyan('{bar}') + '| {percentage}% || {stage}',
    barCompleteChar: '\u2588',
    barIncompleteChar: '\u2591',
    hideCursor: true
  }, Progress.Presets.shades_classic)

  const conf = new Configstore(pkg.name)
  const sets = conf.all
  let { _: [key], config } = argv

  // If the key wasn't provided, promps the user for selection or input
  if (!key) {
    if (sets && Object.keys(sets).length) {
      if (Object.keys(sets).length > 1) {
        const choices = Object.entries(sets)
          .map(([key, { name }]) => ({ value: key, name }))
        const questions = [{
          type: 'list',
          name: 'name',
          message: 'Select the icon set to sync',
          choices,
        }]

        console.log()
        const answers = await inquirer.prompt(questions)
        console.log()
        key = answers.name
      } else {
        console.log()
        key = Object.keys(sets)[0]
        const set = sets[key]
        console.log(`  Syncing "${set.name}" set to the current folder`)
        console.log()
      }
    }
  }

  const mergedArgs = {
    ignore: false,
    data: 'data',
    svg: 'svg',
    key,
    ...config,
    ...argv
  }

  const sync = require('../lib/sync')

  const run = async () => {
    await sync(mergedArgs, progress).catch(handleError)
    console.log()
    process.exit(0)
  }

  run()
})()

function handleError (err) {
  console.log(err.message)
  // console.log(err)
  process.exit(1)
}
