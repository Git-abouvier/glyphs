#!/usr/bin/env node

const parseArgs = require('minimist')
const { log, PRINT } = require('../utils/logger')

const args = process.argv.slice(2)
const argv = parseArgs(args, {
  alias: {
    k: 'key',
    t: 'token',
    r: 'replace',
    h: 'help'
  },
  boolean: ['r', 'h'],
  string: ['k', 't']
})

if (argv.help) {
  PRINT.ADD.HELP()
  process.exit()
}

const { Client: figmaClient } = require('figma-js')
const inquirer = require('inquirer')
const { conf, configs, hasConfig } = require('../utils/config')
const { snakeCase } = require('lodash')

let { key, token, replace } = argv

;(async () => {
  // no key or token provided to console - give prompt
  if (!key || !token) {
    if (hasConfig) {
      const firstSet = Object.values(configs)[0] || {}
      token = firstSet.token
    }

    const validate = (input) => !!(input && input.length) || 'Input value is required'
    const questions = [
      { message: 'Figma File Key:', default: key, type: 'input', name: 'key', validate },
      { message: 'Figma Personal Access Token:', default: token, type: 'input', name: 'token', validate }
    ]

    PRINT.ADD.INFO()

    const answers = await inquirer.prompt(questions)

    key = answers.key
    token = answers.token
  }

  if (!key || !token) {
    PRINT.ADD.FAIL()
  } else {
    if (hasConfig) {
      const [setEntries] = Object.entries(configs).filter(([name, { key: k }]) => k === key)
      const name = setEntries && setEntries[0]
      if (name && !replace) {
        PRINT.ADD.CONFLICT({ name })
        process.exit(1)
      }
    }

    const { client: figma } = figmaClient({ personalAccessToken: token })
    const file = await figma.get(`files/${key}`).then(({ data }) => data).catch(err => {
      const error = err.toJSON()
      log()
      log(error.message, 1)
      log()
      process.exit(1)
    })
    const sets = file.document.children
      .reduce((obj, { name }) => ({ ...obj, [name]: null }), {})

    conf.set(key, { token, key, name: file.name, sets: sets })
    PRINT.ADD.SUCCESS(({ name: file.name }))
  }
  log()
})()
